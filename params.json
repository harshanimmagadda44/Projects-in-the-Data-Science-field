{"name":"Machine-Learning-Assignment","tagline":"This page mainly show the results of the Machine-Learning-Assignment","body":"---\r\ntitle: \"Machine-Learning-Assignment\"\r\nauthor: \"MengNan\"\r\ndate: \"Thursday, July 24, 2014\"\r\n\r\n\r\nThis HTML Page is mainly about the project for Machine Learning provided by JOHNS HOPKINS (https://www.coursera.org/course/predmachlearn) \r\n\r\n1.Backgroud\r\n=========\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement éˆ¥? a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset). \r\n\r\n2.Main Work\r\n=========\r\n\r\n * Getting and Cleaning Data\r\n \r\nRecalling the classes, we know that the most important thing is to come up with questions. Now, the questuions we need to solve has been stated above. So, in the beginning, the first thing we have to do is to get data. After downloading the data sets, you may find that most of the data is missing, so getting and cleaning the data sets is necessary. I use function \"FindBlank\", and clean the data sets to get \"TrainData\" and \"TestData\" as follows(just show part of the data):\r\n\r\n```{r, echo=FALSE}\r\nsummary(TrainData)[,7:12]\r\n\r\n    num_window      roll_belt         pitch_belt          yaw_belt       \r\n    \"Min.   :  1  \" \"Min.   :-28.9  \" \"Min.   :-55.80  \" \"Min.   :-180.0  \"\r\n    \"1st Qu.:222  \" \"1st Qu.:  1.1  \" \"1st Qu.:  1.76  \" \"1st Qu.: -88.3  \"\r\n    \"Median :424  \" \"Median :113.0  \" \"Median :  5.28  \" \"Median : -13.0  \"\r\n    \"Mean   :431  \" \"Mean   : 64.4  \" \"Mean   :  0.31  \" \"Mean   : -11.2  \"\r\n    \"3rd Qu.:644  \" \"3rd Qu.:123.0  \" \"3rd Qu.: 14.90  \" \"3rd Qu.:  12.9  \"\r\n    \"Max.   :864  \" \"Max.   :162.0  \" \"Max.   : 60.30  \" \"Max.   : 179.0  \"\r\n    NA              NA                NA                 NA                \r\n    total_accel_belt  gyros_belt_x      \r\n    \"Min.   : 0.0  \" \"Min.   :-1.0400  \"\r\n    \"1st Qu.: 3.0  \" \"1st Qu.:-0.0300  \"\r\n    \"Median :17.0  \" \"Median : 0.0300  \"\r\n    \"Mean   :11.3  \" \"Mean   :-0.0056  \"\r\n    \"3rd Qu.:18.0  \" \"3rd Qu.: 0.1100  \"\r\n    \"Max.   :29.0  \" \"Max.   : 2.2200  \"\r\n    NA               NA\r\n```\r\n```{r}\r\nhead(TrainData,4)[,7:12]\r\n     num_window roll_belt pitch_belt yaw_belt total_accel_belt gyros_belt_x\r\n   1         11      1.41       8.07    -94.4                3         0.00\r\n   2         11      1.41       8.07    -94.4                3         0.02\r\n   3         11      1.42       8.07    -94.4                3         0.00\r\n   4         12      1.48       8.05    -94.4                3         0.02\r\n```\r\n\r\n```{r}\r\nhead(TestData,4)[,7:12]\r\n     num_window roll_belt pitch_belt yaw_belt total_accel_belt gyros_belt_x\r\n   1         74    123.00      27.00    -4.75               20        -0.50\r\n   2        431      1.02       4.87   -88.90                4        -0.06\r\n   3        439      0.87       1.82   -88.50                5         0.05\r\n   4        194    125.00     -41.60   162.00               17         0.11\r\n```\r\n * PCA & Slicing Data\r\n\r\nAbout 60 features without blank or missing value are chosen from the original data, but 60 is also a large feature set. I want less and typical features which show relatively obvious difference between each two types. So I preprocessing the data by PCA(the data have already been scaled and centerred before PCA). After this step I get a data sets of 37 \"features\", named from PC1 to PC37(The reason why I choose first 37 features will be stated at the Cross Validation Part).\r\n\r\nI used the training data(PCAtrainData) to built my model. Because of some good results of random forest model have been showed before, I Would like to use this model again. Then, slicing the training data into a subset of one smaller training data set(training) and a subset of testing data(testing) which was 1/4 size of the training data. But in fact, my training data(PCAtrainData) was much larger to train a classification model(training the whole large data set need too much time!!!). So I first randomly picked 20 percent of the whole PCAtrainData to make a new smaller training data set(PPCAtrainData), and then sliced 3/4 of PPCAtrainData to train the model and 1/4 of the PPCAtrainData to test whether my model is good enough\r\n```{r}\r\nPick <- createDataPartition(y = PCAtrainData$Class, p = 0.2, list = FALSE)\r\nPPCAtrainData <- PCAtrainData[Pick,]\r\ninTrain <- createDataPartition(y = PPCAtrainData$Class, p = 0.75, list = FALSE)\r\ntraining <- PPCAtrainData[inTrain,]\r\ntesting <- PPCAtrainData[-inTrain,]\r\n```\r\n\r\n * Cross Validation & Error Anlysis\r\n\r\nTo analysis the sample error, this page firstly show the in sample error and out of sample error of objects then we will talk about the feature error.\r\nFirst of all, using the same object twice to built the model1 and model2, and compute the in sample error of the same objects, I get the error rate:\r\n\r\n```{r, echo=FALSE}\r\nerror_internal\r\n  [1] 0\r\n```\r\n\r\nThen, use different objects(but the number of objects is same) to built the model3 and compute the out of sample error. The error rate is:\r\n\r\n```{r, echo=FALSE}\r\nerror_external\r\n  [1] -0.08391\r\n```\r\n\r\nWe can see that both in sample error and out of sample error is small. Remember we ues the PCA and preprocess the features. So, the differences between objects with the same features is not so obvious. But the differences between features is something need to consider...\r\n\r\nLike what we did just now, keeping the objects unchange, but using the same and different features to calculate the in sample and out of sample error of features, I get:\r\n\r\n```{r, echo=FALSE}\r\nFerror_internal:\r\n  [1] 0.00018\r\n\r\nFerror_external:\r\n  [1] -0.01724\r\n```\r\n\r\nThe results show that in sample error can be ignored but the out of sample error is obvious, which means that the the features with larger distinction between different classes of objects should be included into model. This time, I choose first 37 features, for they can intercept 99% of the difference between objects of different classes.\r\n\r\n * Training Model\r\n\r\nNow, let's train the model, you can see some information of modelFit:\r\nThe \"leave one out\" method is used to get some fitted parameter:\r\n```{r}\r\ntrControl <- trainControl(method = \"LOOCV\",p = 0.75, horizon = 1)\r\n```\r\n\r\n```{r}\r\nset.seed(1235)\r\nmodelFit <- train(Class ~ ., data = training, method = \"rf\", prox = TRUE)\r\nmodelFit\r\n```\r\n```{r}\r\n   Random Forest \r\n   \r\n   2946 samples\r\n     37 predictors\r\n      5 classes: 'A', 'B', 'C', 'D', 'E' \r\n   \r\n   No pre-processing\r\n   Resampling: Bootstrapped (25 reps) \r\n   \r\n   Summary of sample sizes: 2946, 2946, 2946, 2946, 2946, 2946, ... \r\n   \r\n   Resampling results across tuning parameters:\r\n   \r\n     mtry  Accuracy  Kappa  Accuracy SD  Kappa SD\r\n     2     0.9       0.9    0.01         0.01    \r\n     20    0.9       0.9    0.008        0.01    \r\n     40    0.9       0.8    0.01         0.01    \r\n   \r\n   Accuracy was used to select the optimal model using  the largest value.\r\n   The final value used for the model was mtry = 2.\r\n```\r\nettign a single tree:\r\n```{r, echo=FALSE}\r\nhead(getTree(modelFit$finalModel, k =2), 20)\r\n\r\n      left daughter right daughter split var split point status prediction\r\n   1              2              3         8   -0.439521      1          0\r\n   2              4              5        26    0.282418      1          0\r\n   3              6              7         2   -3.257470      1          0\r\n   4              8              9         1   -2.368308      1          0\r\n   5             10             11        16   -0.175123      1          0\r\n   6             12             13        31    0.439456      1          0\r\n   7             14             15         9    1.223792      1          0\r\n   8             16             17        24   -0.319219      1          0\r\n   9             18             19        15   -0.371436      1          0\r\n   10            20             21        12    1.034038      1          0\r\n   11            22             23        15   -0.574681      1          0\r\n   12            24             25         1    3.932895      1          0\r\n   13            26             27        34   -0.291963      1          0\r\n   14            28             29        11    0.037027      1          0\r\n   15            30             31         2   -1.603132      1          0\r\n   16            32             33        15   -1.264030      1          0\r\n   17            34             35        10    0.115752      1          0\r\n   18            36             37        20   -0.475095      1          0\r\n   19            38             39         3   -0.002069      1          0\r\n   20            40             41        33   -0.346561      1          0\r\n```\r\nFor a obverious look, I draw the class centering figure(I just use two most distict features PC1 and PC2):\r\n\r\n![Result](https://raw.githubusercontent.com/yelangya3826850/datasciencecoursera/master/Machine-Learning/Assignment/Result.jpg) \r\n\r\nThe Accuracy of my model:\r\n```{r,echo=FALSE}\r\npred <- predict(modelFit,testing); testing$predRight <- pred==testing$Class\r\ntable(pred, testing$Class)\r\nAccuracy <- sum(testing$predRight)/length(testing$predRight)\r\ndata.frame(Accuracy = Accuracy)\r\n```\r\n```{r,echo=FALSE}    \r\n   pred   A   B   C   D   E\r\n      A 271   9   3   2   1\r\n      B   2 173   7   2   4\r\n      C   0   4 152  14   2\r\n      D   5   0   7 140   1\r\n      E   1   4   2   3 172\r\n\r\n        Accuracy\r\n   [1]    0.9256\r\n```\r\nFinally, test the given 20 problems by fitted model obtained just now and get a result answer:\r\n```{r}\r\nanswers <- predict(modelFit,PCAtestData);\r\nanswers\r\n    [1] B A B A A E D B A A B C B A E E A B B B\r\n   Levels: A B C D E\r\n```\r\n\r\nNote that, the real answer is \"B\",\"A\",\"B\",\"A\",\"A\",\"E\",\"D\",\"B\",\"A\",\"A\",\"B\",\"C\",\"B\",\"A\",\"E\",\"E\",\"A\",\"B\",\"B\",\"B\"\r\n(I have try many times to get it! ^_^). So you can see how good my prediction is!\r\n\r\nAppendix\r\n========\r\n\r\n * Data Source\r\n\r\nThe training data for this project are available here: \r\n\r\nhttps://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\r\n\r\nThe test data are available here: \r\n\r\nhttps://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\r\n\r\nThe data for this project come from this source: http://groupware.les.inf.puc-rio.br/har. If you use the document you create for this class for any purpose please cite them as they have been very generous in allowing their data to be used for this kind of assignment. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}